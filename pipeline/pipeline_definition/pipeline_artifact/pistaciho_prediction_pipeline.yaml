# PIPELINE DEFINITION
# Name: pistachio-batch-prediction-pipeline
# Description: pipeline for batch inference of pistachio classifier
# Inputs:
#    project_id: str [Default: 'pistachio-mlops-sbx']
#    sample_records: int [Default: 1000.0]
#    sample_seed: int [Default: 47.0]
components:
  comp-get-model-artifacts-from-registry:
    executorLabel: exec-get-model-artifacts-from-registry
    inputDefinitions:
      parameters:
        model_name:
          parameterType: STRING
        model_registry_location:
          parameterType: STRING
        project_id:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        model_artifact:
          artifactType:
            schemaTitle: google.VertexModel
            schemaVersion: 0.0.1
        psi_artifact:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-infer-monitoring:
    executorLabel: exec-infer-monitoring
    inputDefinitions:
      artifacts:
        inference_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
          description: Dataset to be used for model inference
        psi_artifact:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
          description: PSI object containing statistics computed at training time
    outputDefinitions:
      artifacts:
        psi_results_json:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-model-batch-predict:
    executorLabel: exec-model-batch-predict
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: google.VertexModel
            schemaVersion: 0.0.1
          description: The Model used to get predictions via this job. Must share
            the same ancestor Location. Starting this job has no impact on any existing
            deployments of the Model and their resources. Either this or `unmanaged_container_model`
            must be specified.
          isOptional: true
        unmanaged_container_model:
          artifactType:
            schemaTitle: google.UnmanagedContainerModel
            schemaVersion: 0.0.1
          description: The unmanaged container model used to get predictions via this
            job. This should be used for models that are not uploaded to Vertex. Either
            this or model must be specified.
          isOptional: true
      parameters:
        accelerator_count:
          defaultValue: 0.0
          description: The number of accelerators to attach to the `machine_type`.
            Only used if `machine_type` is set.  For more details about the machine
            spec, see https://cloud.google.com/vertex-ai/docs/reference/rest/v1/MachineSpec
          isOptional: true
          parameterType: NUMBER_INTEGER
        accelerator_type:
          defaultValue: ''
          description: The type of accelerator(s) that may be attached to the machine
            as per `accelerator_count`. Only used if `machine_type` is set.  For more
            details about the machine spec, see https://cloud.google.com/vertex-ai/docs/reference/rest/v1/MachineSpec
          isOptional: true
          parameterType: STRING
        bigquery_destination_output_uri:
          defaultValue: ''
          description: 'The BigQuery project location where the output is to be written
            to. In the given project a new dataset is created with name `prediction_<model-display-name>_<job-create-time>`
            where is made BigQuery-dataset-name compatible (for example, most special
            characters become underscores), and timestamp is in YYYY_MM_DDThh_mm_ss_sssZ
            "based on ISO-8601" format. In the dataset two tables will be created,
            `predictions`, and `errors`. If the Model has both `instance` and `prediction`
            schemata defined then the tables have columns as follows: The `predictions`
            table contains instances for which the prediction succeeded, it has columns
            as per a concatenation of the Model''s instance and prediction schemata.
            The `errors` table contains rows for which the prediction has failed,
            it has instance columns, as per the instance schema, followed by a single
            "errors" column, which as values has [google.rpc.Status](Status) represented
            as a STRUCT, and containing only `code` and `message`. For more details
            about this output config, see https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.batchPredictionJobs#OutputConfig.'
          isOptional: true
          parameterType: STRING
        bigquery_source_input_uri:
          defaultValue: ''
          description: 'BigQuery URI to a table, up to 2000 characters long. For example:
            `projectId.bqDatasetId.bqTableId`  For more details about this input config,
            see https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.batchPredictionJobs#InputConfig.'
          isOptional: true
          parameterType: STRING
        encryption_spec_key_name:
          defaultValue: ''
          description: 'Customer-managed encryption key options for a BatchPredictionJob.
            If this is set, then all resources created by the BatchPredictionJob will
            be encrypted with the provided encryption key.  Has the form: `projects/my-project/locations/my-location/keyRings/my-kr/cryptoKeys/my-key`.
            The key needs to be in the same region as where the compute resource is
            created.'
          isOptional: true
          parameterType: STRING
        excluded_fields:
          defaultValue: []
          description: Fields that will be excluded in the prediction instance that
            is sent to the Model. Excluded will be attached to the batch prediction
            output if key_field is not specified. When `excluded_fields` is populated,
            `included_fields` must be empty. The input must be JSONL with objects
            at each line, CSV, BigQuery or TfRecord. may be specified via the Model's
            `parameters_schema_uri`.
          isOptional: true
          parameterType: LIST
        explanation_metadata:
          defaultValue: {}
          description: Explanation metadata configuration for this BatchPredictionJob.
            Can be specified only if `generate_explanation` is set to `True`.  This
            value overrides the value of `Model.explanation_metadata`. All fields
            of `explanation_metadata` are optional in the request. If a field of the
            `explanation_metadata` object is not populated, the corresponding field
            of the `Model.explanation_metadata` object is inherited.  For more details,
            see https://cloud.google.com/vertex-ai/docs/reference/rest/v1/ExplanationSpec#explanationmetadata.
          isOptional: true
          parameterType: STRUCT
        explanation_parameters:
          defaultValue: {}
          description: Parameters to configure explaining for Model's predictions.
            Can be specified only if `generate_explanation` is set to `True`.  This
            value overrides the value of `Model.explanation_parameters`. All fields
            of `explanation_parameters` are optional in the request. If a field of
            the `explanation_parameters` object is not populated, the corresponding
            field of the `Model.explanation_parameters` object is inherited.  For
            more details, see https://cloud.google.com/vertex-ai/docs/reference/rest/v1/ExplanationSpec#ExplanationParameters.
          isOptional: true
          parameterType: STRUCT
        gcs_destination_output_uri_prefix:
          defaultValue: ''
          description: The Google Cloud Storage location of the directory where the
            output is to be written to. In the given directory a new directory is
            created. Its name is `prediction-<model-display-name>-<job-create-time>`,
            where timestamp is in YYYY-MM-DDThh:mm:ss.sssZ ISO-8601 format. Inside
            of it files `predictions_0001.<extension>`, `predictions_0002.<extension>`,
            ..., `predictions_N.<extension>` are created where `<extension>` depends
            on chosen `predictions_format`, and N may equal 0001 and depends on the
            total number of successfully predicted instances. If the Model has both
            `instance` and `prediction` schemata defined then each such file contains
            predictions as per the `predictions_format`. If prediction for any instance
            failed (partially or completely), then an additional `errors_0001.<extension>`,
            `errors_0002.<extension>`,..., `errors_N.<extension>` files are created
            (N depends on total number of failed predictions). These files contain
            the failed instances, as per their schema, followed by an additional `error`
            field which as value has `google.rpc.Status` containing only `code` and
            `message` fields.  For more details about this output config, see https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.batchPredictionJobs#OutputConfig.
          isOptional: true
          parameterType: STRING
        gcs_source_uris:
          defaultValue: []
          description: Google Cloud Storage URI(-s) to your instances to run batch
            prediction on. They must match `instances_format`. May contain wildcards.
            For more information on wildcards, see [WildcardNames](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames).
            For more details about this input config, see [InputConfig](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.batchPredictionJobs#InputConfig).
          isOptional: true
          parameterType: LIST
        generate_explanation:
          defaultValue: false
          description: 'Generate explanation along with the batch prediction results.
            This will cause the batch prediction output to include explanations based
            on the `prediction_format`: - `bigquery`: output includes a column named
            `explanation`. The value is a struct that conforms to the [aiplatform.gapic.Explanation]
            object. - `jsonl`: The JSON objects on each line include an additional
            entry keyed `explanation`. The value of the entry is a JSON object that
            conforms to the [aiplatform.gapic.Explanation] object. - `csv`: Generating
            explanations for CSV format is not supported.  If this field is set to
            true, either the Model.explanation_spec or explanation_metadata and explanation_parameters
            must be populated.'
          isOptional: true
          parameterType: BOOLEAN
        included_fields:
          defaultValue: []
          description: Fields that will be included in the prediction instance that
            is sent to the Model. If `instance_type` is `array`, the order of field
            names in `included_fields` also determines the order of the values in
            the array. When `included_fields` is populated, `excluded_fields` must
            be empty. The input must be JSONL with objects at each line, CSV, BigQuery
            or TfRecord.
          isOptional: true
          parameterType: LIST
        instance_type:
          defaultValue: ''
          description: 'The format of the instance that the Model accepts. Vertex
            AI will convert compatible [InstancesFormat](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.batchPredictionJobs#InputConfig)
            to the specified format. Supported values are: `object`: Each input is
            converted to JSON object format. * For `bigquery`, each row is converted
            to an object. * For `jsonl`, each line of the JSONL input must be an object.
            * Does not apply to `csv`, `file-list`, `tf-record`, or `tf-record-gzip`.
            `array`: Each input is converted to JSON array format. * For `bigquery`,
            each row is converted to an array. The order of columns is determined
            by the BigQuery column order, unless [included_fields](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.batchPredictionJobs#InputConfig)
            is populated. `included_fields` must be populated for specifying field
            orders. * For `jsonl`, if each line of the JSONL input is an object, `included_fields`
            must be populated for specifying field orders. * Does not apply to `csv`,
            `file-list`, `tf-record`, or `tf-record-gzip`. If not specified, Vertex
            AI converts the batch prediction input as follows: * For `bigquery` and
            `csv`, the behavior is the same as `array`. The order of columns is the
            same as defined in the file or table, unless included_fields is populated.
            * For `jsonl`, the prediction instance format is determined by each line
            of the input. * For `tf-record`/`tf-record-gzip`, each record will be
            converted to an object in the format of `{"b64": <value>}`, where `<value>`
            is the Base64-encoded string of the content of the record. * For `file-list`,
            each file in the list will be converted to an object in the format of
            `{"b64": <value>}`, where `<value>` is the Base64-encoded string of the
            content of the file.'
          isOptional: true
          parameterType: STRING
        instances_format:
          defaultValue: jsonl
          description: The format in which instances are given, must be one of the
            [Model](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.models)'s
            supportedInputStorageFormats. For more details about this input config,
            see [InputConfig](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.batchPredictionJobs#InputConfig.)
          isOptional: true
          parameterType: STRING
        job_display_name:
          description: The user-defined name of this BatchPredictionJob.
          parameterType: STRING
        key_field:
          defaultValue: ''
          description: 'The name of the field that is considered as a key. The values
            identified by the key field is not included in the transformed instances
            that is sent to the Model. This is similar to specifying this name of
            the field in [excluded_fields](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.batchPredictionJobs#InputConfig).
            In addition, the batch prediction output will not include the instances.
            Instead the output will only include the value of the key field, in a
            field named `key` in the output: * For `jsonl` output format, the output
            will have a `key` field instead of the `instance` field. * For `csv`/`bigquery`
            output format, the output will have have a `key` column instead of the
            instance feature columns. The input must be JSONL with objects at each
            line, CSV, BigQuery or TfRecord.'
          isOptional: true
          parameterType: STRING
        labels:
          defaultValue: {}
          description: The labels with user-defined metadata to organize your BatchPredictionJobs.  Label
            keys and values can be no longer than 64 characters (Unicode codepoints),
            can only contain lowercase letters, numeric characters, underscores and
            dashes. International characters are allowed.  See https://goo.gl/xmQnxf
            for more information and examples of labels.
          isOptional: true
          parameterType: STRUCT
        location:
          defaultValue: us-central1
          description: Location for creating the BatchPredictionJob.
          isOptional: true
          parameterType: STRING
        machine_type:
          defaultValue: ''
          description: The type of machine for running batch prediction on dedicated
            resources. If the Model supports DEDICATED_RESOURCES this config may be
            provided (and the job will use these resources). If the Model doesn't
            support AUTOMATIC_RESOURCES, this config must be provided.  For more details
            about the BatchDedicatedResources, see https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.batchPredictionJobs#BatchDedicatedResources.
            For more details about the machine spec, see https://cloud.google.com/vertex-ai/docs/reference/rest/v1/MachineSpec
          isOptional: true
          parameterType: STRING
        manual_batch_tuning_parameters_batch_size:
          defaultValue: 0.0
          description: The number of the records (e.g. instances) of the operation
            given in each batch to a machine replica. Machine type, and size of a
            single record should be considered when setting this parameter, higher
            value speeds up the batch operation's execution, but too high value will
            result in a whole batch not fitting in a machine's memory, and the whole
            operation will fail.
          isOptional: true
          parameterType: NUMBER_INTEGER
        max_replica_count:
          defaultValue: 0.0
          description: The maximum number of machine replicas the batch operation
            may be scaled to. Only used if `machine_type` is set.
          isOptional: true
          parameterType: NUMBER_INTEGER
        model_parameters:
          defaultValue: {}
          description: The parameters that govern the predictions. The schema of the
            parameters
          isOptional: true
          parameterType: STRUCT
        predictions_format:
          defaultValue: jsonl
          description: The format in which Vertex AI gives the predictions. Must be
            one of the Model's supportedOutputStorageFormats. For more details about
            this output config, see [OutputConfig](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.batchPredictionJobs#OutputConfig).
          isOptional: true
          parameterType: STRING
        project:
          defaultValue: '{{$.pipeline_google_cloud_project_id}}'
          description: Project to create the BatchPredictionJob. Defaults to the project
            in which the PipelineJob is run.
          isOptional: true
          parameterType: STRING
        service_account:
          defaultValue: ''
          description: The service account that the DeployedModel's container runs
            as. If not specified, a system generated one will be used, which has minimal
            permissions and the custom container, if used, may not have enough permission
            to access other Google Cloud resources. Users deploying the Model must
            have the iam.serviceAccounts.actAs permission on this service account.
          isOptional: true
          parameterType: STRING
        starting_replica_count:
          defaultValue: 0.0
          description: The number of machine replicas used at the start of the batch
            operation. If not set, Vertex AI decides starting number, not greater
            than `max_replica_count`. Only used if `machine_type` is set.
          isOptional: true
          parameterType: NUMBER_INTEGER
    outputDefinitions:
      artifacts:
        batchpredictionjob:
          artifactType:
            schemaTitle: google.VertexBatchPredictionJob
            schemaVersion: 0.0.1
          description: '[**Deprecated. Use gcs_output_directory and bigquery_output_table
            instead.**] Artifact representation of the created batch prediction job.'
        bigquery_output_table:
          artifactType:
            schemaTitle: google.BQTable
            schemaVersion: 0.0.1
          description: Artifact tracking the batch prediction job output. This is
            only available if bigquery_output_table is specified.
        gcs_output_directory:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
          description: Artifact tracking the batch prediction job output. This is
            only available if gcs_destination_output_uri_prefix is specified.
      parameters:
        gcp_resources:
          description: Serialized gcp_resources proto tracking the batch prediction
            job. For more details, see https://github.com/kubeflow/pipelines/blob/master/components/google-cloud/google_cloud_pipeline_components/proto/README.md.
          parameterType: STRING
  comp-prepare-csv-op:
    executorLabel: exec-prepare-csv-op
    inputDefinitions:
      artifacts:
        input_parquet_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        input_dir:
          parameterType: STRING
        job_id:
          parameterType: STRING
        output_dir:
          parameterType: STRING
        sample_seed:
          parameterType: NUMBER_INTEGER
        storage_bucket:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        prediction_input_csv:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        gcs_input_csv_uri:
          parameterType: LIST
        gcs_output_csv_uri:
          parameterType: STRING
  comp-preprocess-data:
    executorLabel: exec-preprocess-data
    inputDefinitions:
      artifacts:
        input_file:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
          description: path to raw data to be preprocessed
      parameters:
        with_target:
          defaultValue: true
          isOptional: true
          parameterType: BOOLEAN
    outputDefinitions:
      artifacts:
        output_file:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-sample-data:
    executorLabel: exec-sample-data
    inputDefinitions:
      parameters:
        input_file_path:
          description: location of input arff file
          parameterType: STRING
        sample_records:
          defaultValue: 1000.0
          description: number of records to sample
          isOptional: true
          parameterType: NUMBER_INTEGER
        sample_seed:
          defaultValue: 37.0
          description: sseed for sampling data
          isOptional: true
          parameterType: NUMBER_INTEGER
    outputDefinitions:
      artifacts:
        output_sample:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-validate-data:
    executorLabel: exec-validate-data
    inputDefinitions:
      artifacts:
        input_file:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
          description: path to input dataset to be validated
      parameters:
        schema_file_path:
          description: pandera schema file to use for validation
          parameterType: STRING
defaultPipelineRoot: gs://pistachio_pipeline_sbx_bucket/pistachio_prediction_root
deploymentSpec:
  executors:
    exec-get-model-artifacts-from-registry:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - get_model_artifacts_from_registry
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\nfrom google_cloud_pipeline_components.types.artifact_types import VertexModel\n\
          \ndef get_model_artifacts_from_registry(\n        project_id: str,\n   \
          \     model_name: str,\n        model_registry_location: str,\n        model_artifact:\
          \ Output[VertexModel],\n        psi_artifact: Output[Artifact]\n       \
          \ ) :\n    \"\"\"get model details from the registry\"\"\"\n\n    # Create\
          \ a client\n    # project = \"pistachio-mlops-sbx\"\n    # location = 'northamerica-northeast2'\n\
          \    # name = \"pistachio_classifier\"\n\n    from google.cloud import aiplatform\n\
          \n    aiplatform.init(project=project_id, location=model_registry_location)\n\
          \n    models = aiplatform.Model.list(\n        filter=f'display_name=\"\
          {model_name}\"',\n        order_by=\"update_time desc\"\n\n    )\n    if\
          \ not models:\n        raise ValueError(f\"no models found for name {model_name}\"\
          )\n    model = models[0]\n\n    model_info = model.to_dict()\n    model_name\
          \ = model_info['name']\n    model_uri = f'https://{model_registry_location}-aiplatform.googleapis.com/v1/{model_name}'\n\
          \    # model_artifact.uri = model_uri\n    metadata={\n          'resourceName':\
          \ model_name}\n    model_artifact.metadata = metadata\n\n    psi_artifact.uri\
          \ = model_info['artifactUri'] + 'psi_artifact.pkl'\n\n"
        image: northamerica-northeast2-docker.pkg.dev/pistachio-mlops-sbx/pistachio-base/pistachio_gcp_aip:0.0.1
    exec-infer-monitoring:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - infer_monitoring
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef infer_monitoring(\n    inference_data: Input[Dataset],\n    psi_artifact:\
          \ Input[Artifact],\n    psi_results_json: Output[Artifact]\n    ) -> None:\n\
          \    \"\"\"inference monitoring component\n    check for data drift when\
          \ running inference\n\n    Args:\n        inference_data (Input[Dataset]):\
          \ Dataset to be used for model inference\n        psi_artifact (Input[Artifact]):\
          \ PSI object containing statistics computed at training time\n        psi_results_json\
          \ (Output[Artifact]): PSI results as json file\n\n    Returns:\n       \
          \ None\n    \"\"\"\n\n    from infer_monitor import eval_psi\n    from pistachio.data_handling\
          \ import read_from_json\n\n    psi_results_json.path = psi_results_json.path\
          \ + '.json'\n\n    eval_psi(inference_data.path, psi_artifact.path, psi_results_json.path)\n\
          \    # attach psi results as metadata\n    psi_results = read_from_json(psi_results_json.path)\n\
          \    inference_data.metadata['psi_evaluation_results'] = psi_results\n\n"
        image: northamerica-northeast2-docker.pkg.dev/pistachio-mlops-sbx/pistachio-base/pistachio_base:0.0.1
    exec-model-batch-predict:
      container:
        args:
        - --type
        - BatchPredictionJob
        - --payload
        - '{"Concat": ["{", "\"display_name\": \"", "{{$.inputs.parameters[''job_display_name'']}}",
          "\", ", {"IfPresent": {"InputName": "model", "Then": {"Concat": ["\"model\":
          \"", "{{$.inputs.artifacts[''model''].metadata[''resourceName'']}}", "\","]}}},
          " \"input_config\": {", "\"instances_format\": \"", "{{$.inputs.parameters[''instances_format'']}}",
          "\"", ", \"gcs_source\": {", "\"uris\":", "{{$.inputs.parameters[''gcs_source_uris'']}}",
          "}", ", \"bigquery_source\": {", "\"input_uri\": \"", "{{$.inputs.parameters[''bigquery_source_input_uri'']}}",
          "\"", "}", "}", ", \"instance_config\": {", "\"instance_type\": \"", "{{$.inputs.parameters[''instance_type'']}}",
          "\"", ", \"key_field\": \"", "{{$.inputs.parameters[''key_field'']}}", "\"
          ", {"IfPresent": {"InputName": "included_fields", "Then": {"Concat": [",
          \"included_fields\": ", "{{$.inputs.parameters[''included_fields'']}}"]}}},
          {"IfPresent": {"InputName": "excluded_fields", "Then": {"Concat": [", \"excluded_fields\":
          ", "{{$.inputs.parameters[''excluded_fields'']}}"]}}}, "}", ", \"model_parameters\":
          ", "{{$.inputs.parameters[''model_parameters'']}}", ", \"output_config\":
          {", "\"predictions_format\": \"", "{{$.inputs.parameters[''predictions_format'']}}",
          "\"", ", \"gcs_destination\": {", "\"output_uri_prefix\": \"", "{{$.inputs.parameters[''gcs_destination_output_uri_prefix'']}}",
          "\"", "}", ", \"bigquery_destination\": {", "\"output_uri\": \"", "{{$.inputs.parameters[''bigquery_destination_output_uri'']}}",
          "\"", "}", "}", ", \"dedicated_resources\": {", "\"machine_spec\": {", "\"machine_type\":
          \"", "{{$.inputs.parameters[''machine_type'']}}", "\"", ", \"accelerator_type\":
          \"", "{{$.inputs.parameters[''accelerator_type'']}}", "\"", ", \"accelerator_count\":
          ", "{{$.inputs.parameters[''accelerator_count'']}}", "}", ", \"starting_replica_count\":
          ", "{{$.inputs.parameters[''starting_replica_count'']}}", ", \"max_replica_count\":
          ", "{{$.inputs.parameters[''max_replica_count'']}}", "}", ", \"service_account\":
          \"", "{{$.inputs.parameters[''service_account'']}}", "\"", ", \"manual_batch_tuning_parameters\":
          {", "\"batch_size\": ", "{{$.inputs.parameters[''manual_batch_tuning_parameters_batch_size'']}}",
          "}", ", \"generate_explanation\": ", "{{$.inputs.parameters[''generate_explanation'']}}",
          ", \"explanation_spec\": {", "\"parameters\": ", "{{$.inputs.parameters[''explanation_parameters'']}}",
          ", \"metadata\": ", "{{$.inputs.parameters[''explanation_metadata'']}}",
          "}", ", \"labels\": ", "{{$.inputs.parameters[''labels'']}}", ", \"encryption_spec\":
          {\"kms_key_name\":\"", "{{$.inputs.parameters[''encryption_spec_key_name'']}}",
          "\"}", "}"]}'
        - --project
        - '{{$.inputs.parameters[''project'']}}'
        - --location
        - '{{$.inputs.parameters[''location'']}}'
        - --gcp_resources
        - '{{$.outputs.parameters[''gcp_resources''].output_file}}'
        - --executor_input
        - '{{$}}'
        command:
        - python3
        - -u
        - -m
        - google_cloud_pipeline_components.container.v1.batch_prediction_job.launcher
        image: gcr.io/ml-pipeline/google-cloud-pipeline-components:2.8.0
    exec-prepare-csv-op:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - prepare_csv_op
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef prepare_csv_op(\n        storage_bucket: str,\n        sample_seed:\
          \ int,\n        job_id: str,\n        input_dir: str,\n        output_dir:\
          \ str,\n        input_parquet_data: Input[Dataset],\n        prediction_input_csv:\
          \ Output[Dataset]\n    ) -> NamedTuple('BatchPredictionPaths', [('gcs_input_csv_uri',\
          \ List[str]),('gcs_output_csv_uri',str)]):\n    \"\"\"\n    - convert input\
          \ parquet data to csv file\n    - create dataset artifacts using paths defined\n\
          \    \"\"\"\n\n    import logging\n    from google.cloud import storage\n\
          \    import kfp\n    import json\n    from pistachio.data_handling import\
          \ parquet_to_csv\n    from pistachio.utils import ensure_directory_exists\n\
          \    from typing import NamedTuple\n\n    class BatchPredictionPaths(NamedTuple):\n\
          \        gcs_input_csv_uri: List[str]\n        gcs_output_csv_uri: str\n\
          \n\n    logger = logging.getLogger('pistachio.prepare_csv_op')\n\n    #\
          \ https://www.kubeflow.org/docs/components/pipelines/v2/components/lightweight-python-components/#install_kfp_package\n\
          \    # kfp is installed at runtime by default\n\n    # run_id = kfp.dsl.RUN_ID_PLACEHOLDER\n\
          \    logger.info('initial input path: {prediction_input_csv.path}')\n  \
          \  logger.info('initial input uri: {prediction_input_csv.uri}')\n\n    the_input_uri\
          \ = f'gs://{storage_bucket}/{input_dir}/{sample_seed}/{job_id}/pistachio_input.csv'\n\
          \    the_output_uri = f'gs://{storage_bucket}/{output_dir}/{sample_seed}/{job_id}/'\n\
          \n\n    prediction_input_csv.uri = the_input_uri\n\n    logger.info('modified\
          \ input path: {prediction_input_csv.path}')\n    logger.info('modified input\
          \ uri: {prediction_input_csv.uri}')\n\n    ensure_directory_exists(prediction_input_csv.path)\n\
          \n    parquet_to_csv(input_parquet_data.path, prediction_input_csv.path)\n\
          \n    return BatchPredictionPaths([the_input_uri], the_output_uri)\n\n \
          \   # class BatchPredictionPaths(NamedTuple):\n    #     gcs_input_csv_uri:\
          \ List[str]\n    #     gcs_output_csv_uri: str\n\n    # prediction_output_csv.uri\
          \ = output_gcs_csv_path\n\n    # storage_client = storage.Client()\n   \
          \ # bucket = storage_client.bucket(storage_bucket)\n\n    # # upload model\
          \ artifact\n    # model_artifact_filename = model.path.split('/')[-1]\n\
          \    # destination_blob_name = f'{artifact_path}/{run_id}/{model_artifact_filename}'\n\
          \n    # blob = bucket.blob(destination_blob_name)\n    # blob.upload_from_filename(model.path)\n\
          \n"
        image: northamerica-northeast2-docker.pkg.dev/pistachio-mlops-sbx/pistachio-base/pistachio_base:0.0.1
    exec-preprocess-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - preprocess_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef preprocess_data(\n    input_file: Input[Dataset],\n    output_file:\
          \ Output[Dataset],\n    with_target: bool=True\n    )-> None:\n    \"\"\"\
          preprocess_data component\n\n    Args:\n        input_file (Input[Dataset]):\
          \ path to raw data to be preprocessed\n        output_file (Output[Dataset]):\
          \ path where preprocessed data will be written \n        feature_list (Output[Artifact]):\
          \ path to where list of feature columns will be written as json\n\n    Returns:\n\
          \        None\n    \"\"\"   \n    from preprocess_data import preprocess_data_features\n\
          \n    output_file.path = output_file.path + '.pqt'\n\n    features = preprocess_data_features(\
          \ input_file.path, output_file.path, with_target=with_target)\n    output_file.metadata['features']\
          \ = features\n\n"
        image: northamerica-northeast2-docker.pkg.dev/pistachio-mlops-sbx/pistachio-base/pistachio_base:0.0.1
    exec-sample-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - sample_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef sample_data(input_file_path: str,\n    output_sample: Output[Dataset],\n\
          \    sample_seed: int=37,\n    sample_records: int=1000\n    )-> None:\n\
          \    \"\"\"load_data\n    component to load data from arff file and write\
          \ to parquet\n\n    Args:\n        input_file_path (str): location of input\
          \ arff file\n        output_sample (Output[Dataset]): path to write output\
          \ parquet file\n        sample_seed (int, optional): sseed for sampling\
          \ data\n        sample_records (int, optional): number of records to sample\n\
          \n    Returns:\n        None\n    \"\"\"\n\n    from load_data import sample_data\n\
          \    # load_data.py is the python file in the image - the container components\
          \ run this as an entrypoint\n\n    output_sample.path = output_sample.path\
          \ + '.pqt'\n\n    sample_data(\n        input_file_path=input_file_path,\n\
          \        output_file_path=output_sample.path,\n        sample_seed=sample_seed,\n\
          \        sample_records=sample_records\n    )\n\n"
        image: northamerica-northeast2-docker.pkg.dev/pistachio-mlops-sbx/pistachio-base/pistachio_base:0.0.1
    exec-validate-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - validate_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef validate_data(\n    input_file: Input[Dataset],\n    schema_file_path:\
          \ str\n    )-> None:\n    \"\"\"validate_data component\n\n    Args:\n \
          \       input_file (Input[Dataset]): path to input dataset to be validated\n\
          \        schema_file_path (str): pandera schema file to use for validation\n\
          \n    Returns:\n        None\n    \"\"\"\n    from validate_data import\
          \ validate_data\n    validate_data(input_file.path, schema_file_path)\n\n"
        image: northamerica-northeast2-docker.pkg.dev/pistachio-mlops-sbx/pistachio-base/pistachio_base:0.0.1
pipelineInfo:
  description: pipeline for batch inference of pistachio classifier
  name: pistachio-batch-prediction-pipeline
root:
  dag:
    tasks:
      get-model-artifacts-from-registry:
        cachingOptions: {}
        componentRef:
          name: comp-get-model-artifacts-from-registry
        inputs:
          parameters:
            model_name:
              runtimeValue:
                constant: pistachio_classifier
            model_registry_location:
              runtimeValue:
                constant: northamerica-northeast2
            project_id:
              componentInputParameter: project_id
        taskInfo:
          name: get-model-artifacts-from-registry
      infer-monitoring:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-infer-monitoring
        dependentTasks:
        - get-model-artifacts-from-registry
        - preprocess-data
        inputs:
          artifacts:
            inference_data:
              taskOutputArtifact:
                outputArtifactKey: output_file
                producerTask: preprocess-data
            psi_artifact:
              taskOutputArtifact:
                outputArtifactKey: psi_artifact
                producerTask: get-model-artifacts-from-registry
        taskInfo:
          name: sample data PSI monitoring
      model-batch-predict:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-model-batch-predict
        dependentTasks:
        - get-model-artifacts-from-registry
        - prepare-csv-op
        inputs:
          artifacts:
            model:
              taskOutputArtifact:
                outputArtifactKey: model_artifact
                producerTask: get-model-artifacts-from-registry
          parameters:
            gcs_destination_output_uri_prefix:
              taskOutputParameter:
                outputParameterKey: gcs_output_csv_uri
                producerTask: prepare-csv-op
            gcs_source_uris:
              taskOutputParameter:
                outputParameterKey: gcs_input_csv_uri
                producerTask: prepare-csv-op
            instances_format:
              runtimeValue:
                constant: csv
            job_display_name:
              runtimeValue:
                constant: pistachio_classifier_batch_prediction
            location:
              runtimeValue:
                constant: northamerica-northeast2
            machine_type:
              runtimeValue:
                constant: e2-standard-2
            project:
              componentInputParameter: project_id
        taskInfo:
          name: batch prediction task
      prepare-csv-op:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-prepare-csv-op
        dependentTasks:
        - preprocess-data
        inputs:
          artifacts:
            input_parquet_data:
              taskOutputArtifact:
                outputArtifactKey: output_file
                producerTask: preprocess-data
          parameters:
            input_dir:
              runtimeValue:
                constant: pistachio_prediction_input
            job_id:
              runtimeValue:
                constant: '{{$.pipeline_job_uuid}}'
            output_dir:
              runtimeValue:
                constant: pistachio_prediction_output
            sample_seed:
              componentInputParameter: sample_seed
            storage_bucket:
              runtimeValue:
                constant: pistachio_pipeline_sbx_bucket
        taskInfo:
          name: prepare-csv-op
      preprocess-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-preprocess-data
        dependentTasks:
        - sample-data
        - validate-data
        inputs:
          artifacts:
            input_file:
              taskOutputArtifact:
                outputArtifactKey: output_sample
                producerTask: sample-data
          parameters:
            with_target:
              runtimeValue:
                constant: false
        taskInfo:
          name: preprocess sample data
      sample-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-sample-data
        inputs:
          parameters:
            input_file_path:
              runtimeValue:
                constant: /gcs/pistachio_pipeline_sbx_bucket/pipeline_resources/Pistachio_16_Features_Dataset.arff
            sample_records:
              componentInputParameter: sample_records
            sample_seed:
              componentInputParameter: sample_seed
        taskInfo:
          name: sample dataset
      validate-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-validate-data
        dependentTasks:
        - sample-data
        inputs:
          artifacts:
            input_file:
              taskOutputArtifact:
                outputArtifactKey: output_sample
                producerTask: sample-data
          parameters:
            schema_file_path:
              runtimeValue:
                constant: /gcs/pistachio_pipeline_sbx_bucket/pipeline_resources/pistachio_schema.json
        taskInfo:
          name: validate sample data
  inputDefinitions:
    parameters:
      project_id:
        defaultValue: pistachio-mlops-sbx
        isOptional: true
        parameterType: STRING
      sample_records:
        defaultValue: 1000.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      sample_seed:
        defaultValue: 47.0
        isOptional: true
        parameterType: NUMBER_INTEGER
schemaVersion: 2.1.0
sdkVersion: kfp-2.3.0
